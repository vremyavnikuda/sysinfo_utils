name: CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'gpu_info/**'
      - 'system_info_lib/**'
      - 'system_cli/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'gpu_info/**'
      - 'system_info_lib/**'
      - 'system_cli/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - '.github/workflows/ci.yml'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Check formatting
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      
      - name: Check formatting
        run: cargo fmt --all -- --check

  # Run clippy lints
  clippy:
    name: Clippy (${{ matrix.package }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rust: [stable, beta]
        package: [gpu_info, system_info_lib, system_cli]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: clippy
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run clippy on ${{ matrix.package }}
        run: cargo clippy -p ${{ matrix.package }} --all-targets --all-features -- -D warnings

  # Run tests on multiple platforms
  test:
    name: Test ${{ matrix.package }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        package: [gpu_info, system_info_lib, system_cli]
        include:
          # Test on nightly but allow failures
          - os: ubuntu-latest
            rust: nightly
            package: gpu_info
          - os: ubuntu-latest
            rust: nightly
            package: system_info_lib
          - os: ubuntu-latest
            rust: nightly
            package: system_cli
          - os: windows-latest
            rust: nightly
            package: gpu_info
          - os: windows-latest
            rust: nightly
            package: system_info_lib
          - os: windows-latest
            rust: nightly
            package: system_cli
          - os: macos-latest
            rust: nightly
            package: gpu_info
          - os: macos-latest
            rust: nightly
            package: system_info_lib
          - os: macos-latest
            rust: nightly
            package: system_cli
    continue-on-error: ${{ matrix.rust == 'nightly' }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run tests (no features) - ${{ matrix.package }}
        run: cargo test -p ${{ matrix.package }} --verbose
      
      - name: Run tests (all features) - ${{ matrix.package }}
        run: cargo test -p ${{ matrix.package }} --all-features --verbose

  # Build documentation
  doc:
    name: Documentation (${{ matrix.package }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: [gpu_info, system_info_lib, system_cli]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Build documentation - ${{ matrix.package }}
        run: cargo doc -p ${{ matrix.package }} --no-deps --all-features
        env:
          RUSTDOCFLAGS: -D warnings
      
      - name: Check for broken intra-doc links - ${{ matrix.package }}
        run: cargo doc -p ${{ matrix.package }} --no-deps --all-features --document-private-items

  # Check minimum supported Rust version
  msrv:
    name: MSRV (${{ matrix.package }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: [gpu_info, system_info_lib, system_cli]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain (MSRV)
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: "1.70.0"
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-msrv-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-msrv-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-msrv-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Check MSRV - ${{ matrix.package }}
        run: cargo check -p ${{ matrix.package }} --all-features

  # Build examples
  examples:
    name: Build Examples (${{ matrix.package }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package: [gpu_info, system_info_lib, system_cli]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Build examples - ${{ matrix.package }}
        run: cargo build -p ${{ matrix.package }} --examples --all-features
        continue-on-error: true

  # Platform-specific feature tests
  features:
    name: Feature Combinations (${{ matrix.package }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: [gpu_info, system_info_lib, system_cli]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Install cargo-hack
        uses: taiki-e/install-action@cargo-hack
      
      - name: Check feature combinations - ${{ matrix.package }}
        run: cargo hack check -p ${{ matrix.package }} --feature-powerset --depth 2

  # Check for common issues
  check:
    name: Cargo Check ${{ matrix.package }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        package: [gpu_info, system_info_lib, system_cli]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run cargo check - ${{ matrix.package }}
        run: cargo check -p ${{ matrix.package }} --all-targets --all-features

  # Success indicator job
  ci-success:
    name: CI Success
    needs: [fmt, clippy, test, doc, msrv, examples, features, check]
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Mark CI as successful
        run: echo "All CI checks passed!"
